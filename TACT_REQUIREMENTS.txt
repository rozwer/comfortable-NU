================================================================================
TACT ポータル機能拡張 - 要件定義書
作成日: 2025-05-24
================================================================================

【プロジェクト概要】
TACTポータルに以下の2つの独立した機能を分割実装する：
1. メモ機能 - 講義ごとのメモとリンク管理
2. フォルダ機能 - APIベースのフォルダ構造管理（VSCode形式）

================================================================================
【1. メモ機能】
================================================================================

【目的】
- 講義ごとのメモ作成・管理
- 関連リンクの保存・整理
- データのエクスポート・インポート

【機能要件】
■ 基本機能
- 講義ごとのメモ作成・編集・削除
- リンクの保存・管理（URL、タイトル、説明）
- タブベースUI（現在の講義、全メモ、リンク、検索）
- CRUD操作（作成・読取・更新・削除）

■ データ構造
```
LectureNote {
  id: string
  lectureId: string
  lectureName: string
  note: string
  links: LinkItem[]
  createdAt: Date
  updatedAt: Date
}

LinkItem {
  id: string
  url: string
  title: string
  description?: string
}
```

■ ストレージ
- ローカルストレージ使用
- キー: 'tact-lecture-notes', 'tact-saved-links'

■ UI仕様
- モーダルダイアログ形式
- 4タブ構成（現在の講義、全メモ、リンク、検索）
- z-index: 10501（TACTモーダルより上位）

■ エクスポート・インポート
- JSON形式でのデータエクスポート
- JSONファイルからのインポート機能

【実装状況】
✅ 完了 - MemoManager クラス（memo.ts）
✅ 完了 - MemoUI クラス（memo-ui.ts）
✅ 完了 - CSS スタイル（memo-styles.css）
✅ 完了 - index.ts への統合
✅ 完了 - manifest.json への追加

================================================================================
【2. フォルダ機能】 ※要件変更
================================================================================

【目的】
- TACTポータルのAPIからフォルダ構造を取得
- VSCode形式のファイルエクスプローラー風UI提供
- ローカルでのフォルダ・ファイル管理（仮想的）

【機能要件】
■ API連携
- TACTポータルのファイル・フォルダAPIからデータ取得
- ファイル一覧の動的取得
- フォルダ階層構造の維持

■ UI仕様
- VSCodeのExplorer風インターフェース
- 階層構造の表示（ツリー形式）
- ファイル・フォルダアイコン
- 展開・折りたたみ機能
- パンくずナビゲーション

■ データ構造（修正版）
```
TACTFolder {
  id: string
  name: string
  type: 'folder' | 'file'
  parentId: string | null
  path: string
  url?: string // ファイルの場合のダウンロードURL
  size?: number // ファイルサイズ
  lastModified?: Date
  children?: TACTFolder[] // フォルダの場合
}

FolderTreeState {
  expandedFolders: Set<string>
  selectedItem: string | null
  currentPath: string[]
}
```

■ 基本操作
- フォルダ展開・折りたたみ
- ファイル選択・プレビュー
- パス移動（パンくずクリック）
- 検索機能（ファイル名・拡張子）

■ API仕様（想定）
```
GET /api/folders?path={path}
→ 指定パスのフォルダ・ファイル一覧を取得

GET /api/files/{fileId}/download
→ ファイルのダウンロードURL取得
```

■ ストレージ
- 取得したフォルダ構造のキャッシュ
- 展開状態の保持
- キー: 'tact-folder-cache', 'tact-folder-state'

【現在の実装状況】
❌ 要修正 - 現在はローカルファイル管理として実装済み
❌ 要修正 - API連携機能が未実装
❌ 要修正 - VSCode風UIの作り直しが必要

================================================================================
【3. 技術仕様】
================================================================================

【共通仕様】
■ 統合方法
- TACTポータルのツールメニューにタブ追加
- index.ts の addSampleCustomTabs() で実装

■ CSS管理
- 各機能専用のCSSファイル
- 動的読み込み（loadCSS関数）
- z-index管理（TACTモーダル: 10000 < 機能モーダル）

■ エラーハンドリング
- API通信エラーの適切な処理
- ユーザーフレンドリーなエラーメッセージ
- フォールバック機能

【ファイル構成】
```
src/features/tact/
├── index.ts          # メイン統合ファイル
├── memo.ts           # メモ管理 ✅完了
├── memo-ui.ts        # メモUI ✅完了
├── folder.ts         # フォルダ管理 ❌要修正
├── folder-ui.ts      # フォルダUI ❌要修正
└── types.ts          # 型定義

public/css/
├── memo-styles.css   # メモ用CSS ✅完了
└── folder-styles.css # フォルダ用CSS ❌要修正
```

================================================================================
【4. 実装タスク】
================================================================================

【優先度：高】
1. フォルダ機能の要件変更対応
   - API連携仕様の詳細化
   - VSCode風UIの設計
   - 既存実装の修正

2. API調査・実装
   - TACTポータルのAPI仕様調査
   - フォルダ・ファイル取得APIの実装
   - エラーハンドリング

3. フォルダUIの再実装
   - VSCodeエクスプローラー風デザイン
   - ツリー構造表示
   - 階層ナビゲーション

【優先度：中】
4. 統合テスト
   - 両機能の動作確認
   - z-index問題の最終確認
   - TACTポータルでの実機テスト

5. 最適化・改善
   - パフォーマンス最適化
   - UI/UXの改善
   - エラーハンドリングの強化

================================================================================
【5. 注意事項】
================================================================================

■ 互換性
- 既存のMaterial、Assignment、Quiz機能とは独立
- TACTポータルの既存UIを破壊しない
- 他の拡張機能との競合回避

■ セキュリティ
- API通信の適切な認証
- XSS対策
- データの安全な保存

■ メンテナンス性
- コードの可読性
- 適切なエラーログ
- 機能の独立性維持

================================================================================
【6. 変更履歴】
================================================================================

2025-05-24: 初版作成
- メモ機能：完了済み機能の整理
- フォルダ機能：要件変更（ローカル管理→API連携）の反映
- 実装タスクの優先度設定
