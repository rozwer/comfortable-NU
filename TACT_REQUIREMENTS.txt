================================================================================
TACT ポータル機能拡張 - 要件定義書
作成日: 2025-05-24
================================================================================

【プロジェクト概要】
TACTポータルに以下の2つの独立した機能を分割実装する：
1. メモ機能 - 講義ごとのメモとリンク管理
2. フォルダ機能 - APIベースのフォルダ構造管理（VSCode形式）

================================================================================
【1. メモ機能】
================================================================================

【目的】
- 講義ごとのメモ作成・管理
- 関連リンクの保存・整理
- データのエクスポート・インポート

【機能要件】
■ 基本機能
- 講義ごとのメモ作成・編集・削除
- リンクの保存・管理（URL、タイトル、説明）
- タブベースUI（現在の講義、全メモ、リンク、検索）
- CRUD操作（作成・読取・更新・削除）

■ データ構造
```
LectureNote {
  id: string
  lectureId: string
  lectureName: string
  note: string
  links: LinkItem[]
  createdAt: Date
  updatedAt: Date
}

LinkItem {
  id: string
  url: string
  title: string
  description?: string
}
```

■ ストレージ
- ローカルストレージ使用
- キー: 'tact-lecture-notes', 'tact-saved-links'

■ UI仕様
- モーダルダイアログ形式
- 4タブ構成（現在の講義、全メモ、リンク、検索）
- z-index: 10501（TACTモーダルより上位）

■ エクスポート・インポート
- JSON形式でのデータエクスポート
- JSONファイルからのインポート機能

【実装状況】
🔄 Phase 1 - FolderDataManager（データ層）
🔄 Phase 2 - FolderExplorerUI（UI基盤）
⏳ Phase 3 - 高度機能（プレビュー・検索）
⏳ 統合テスト・最適化

================================================================================
【2. フォルダ機能】 ※仕様確定版
================================================================================

【目的】
- TACTポータルのAPIからフォルダ構造を取得し、ローカル疑似エクスプローラーを構築
- VSCode Explorer風の操作性でファイル・フォルダを管理
- PDFプレビュー機能とリンク管理

【機能要件】
■ API連携
- TACT Direct API `/direct/content/site/{siteId}.json` でフラットデータ取得
- クライアント側で`container`フィールドを基に階層構造を構築
- 講義サイト別のファイル構造管理

■ UI仕様
- **Explorer風操作性**：VSCodeのような直感的なファイル操作
- **階層表示**：インデントベースのツリー構造
- **展開・折りたたみ**：フォルダクリックで開閉
- **ファイルアクション**：
  - クリック → 新タブで開く
  - プレビューボタン → モーダルでPDF表示
- **パンくずナビゲーション**：現在位置の表示と移動

■ データ構造（確定版）
```typescript
// TACT APIレスポンス（実測値ベース）
interface TactContentItem {
  title: string;           // "lec01.pdf", "第1回(4月11日)"
  type: string;           // "collection" | "application/pdf" | "text/plain" など
  url: string;            // 実際のファイルURL
  container: string;      // 親フォルダパス "/content/group/siteId/folder/"
  numChildren?: number;   // フォルダの場合の子要素数
}

// 内部データ構造
interface FolderItem {
  id: string;             // container + title から生成
  name: string;           // title
  type: 'folder' | 'file';
  parentPath: string;     // container
  fullPath: string;       // parentPath + name
  url: string;            // ファイルの場合のアクセスURL
  mimeType?: string;      // ファイルタイプ
  children: FolderItem[]; // フォルダの場合
}

// UI状態管理
interface FolderViewState {
  expandedFolders: Set<string>;     // 展開中のフォルダパス
  selectedItem: string | null;     // 選択中のアイテムID
  currentSiteId: string;           // 現在表示中の講義ID
  breadcrumb: string[];            // パンくず（フォルダパス配列）
  searchQuery: string;             // 検索文字列
}
```

■ 基本操作
- **フォルダ操作**：
  - クリック → 展開・折りたたみ
  - 子要素の表示・非表示切り替え
- **ファイル操作**：
  - クリック → `window.open(url, '_blank')` で新タブ
  - プレビューボタン → PDF表示モーダル
  - URLコピーボタン → クリップボードにURL
- **ナビゲーション**：
  - パンくずクリック → 該当フォルダまで移動
  - 検索 → ファイル名・拡張子でフィルタ

■ API仕様（確定版）
```typescript
// データ取得
GET https://tact.ac.thers.ac.jp/direct/content/site/{siteId}.json
Response: {
  entityPrefix: "content",
  content_collection: TactContentItem[]
}

// 階層構築アルゴリズム
1. 全アイテムを取得
2. containerでグループ化
3. type="collection"をフォルダとして識別
4. 親子関係を構築してツリー化
```

■ ストレージ
- **キャッシュ**：`tact-folder-cache-{siteId}` - API取得データ
- **状態保存**：`tact-folder-state` - 展開状態・選択状態
- **キャッシュ期間**：30分（API再取得の判断基準）

================================================================================
【3. 技術仕様】
================================================================================

【共通仕様】
■ 統合方法
- TACTポータルのツールメニューにタブ追加
- index.ts の addSampleCustomTabs() で実装

■ CSS管理
- 各機能専用のCSSファイル
- 動的読み込み（loadCSS関数）
- z-index管理（TACTモーダル: 10000 < 機能モーダル）

■ エラーハンドリング
- **API通信エラー**：
  - ネットワークエラー → ローカルキャッシュにフォールバック
  - 403/401エラー → ログイン要求メッセージ
  - 500エラー → 「サーバーエラー、時間を置いて再試行」
- **データ解析エラー**：
  - 空レスポンス → 「フォルダが空です」表示
  - 形式エラー → デフォルト階層で表示
- **UI エラー**：
  - PDF読み込み失敗 → 「プレビューできません」
  - モーダル表示エラー → 新タブで開く

【実装時の技術的注意点】
■ パフォーマンス
- **遅延読み込み**：大きなフォルダは段階的に展開
- **仮想スクロール**：多数ファイル時のメモリ最適化
- **キャッシュ戦略**：API結果を30分間保持

■ セキュリティ
- **XSS対策**：ファイル名のHTMLエスケープ
- **URL検証**：TACT ドメイン以外のリンク拒否
- **CSP準拠**：inline script回避

■ アクセシビリティ
- **キーボード操作**：矢印キー・Enter・Spaceキー対応
- **スクリーンリーダー**：適切なaria-label設定
- **フォーカス管理**：モーダル内のtab順序



================================================================================
【4. 実装タスク】 ※分割実装版
================================================================================

【Phase 1: 基盤実装】（優先度：最高）
1. **データ層実装**
   - `FolderDataManager` クラス作成
   - TACT API連携機能
   - フラットデータ → 階層構造変換
   - キャッシュ機能

2. **型定義・インターフェース**
   - `types.ts` の更新
   - API レスポンス型定義
   - 内部データ構造定義

【Phase 2: UI基盤】（優先度：高）
3. **基本UI実装**
   - `FolderExplorerUI` クラス作成
   - モーダルダイアログ基盤
   - ツリー構造表示ロジック

4. **基本操作実装**
   - フォルダ展開・折りたたみ
   - ファイル選択機能
   - 基本的なクリックイベント

【Phase 3: 機能拡張】（優先度：中）
5. **高度な操作**
   - PDFプレビューモーダル
   - パンくずナビゲーション
   - 検索・フィルタ機能

6. **統合・最適化**
   - index.ts への統合
   - CSS スタイリング
   - エラーハンドリング強化

【実装ファイル構成】
```
src/features/tact/
├── folder-manager.ts      # データ管理・API連携
├── folder-ui.ts          # UI表示・イベント処理  
├── folder-types.ts       # 型定義（types.tsから分離）
└── folder-styles.css     # Explorer風スタイル
```

【Phase別詳細仕様】

■ Phase 1: FolderDataManager
```typescript
class FolderDataManager {
  // API関連
  async fetchSiteContent(siteId: string): Promise<TactContentItem[]>
  
  // データ変換
  buildHierarchy(flatItems: TactContentItem[]): FolderItem
  
  // キャッシュ管理
  getCachedData(siteId: string): FolderItem | null
  setCachedData(siteId: string, data: FolderItem): void
  
  // ユーティリティ
  findItemByPath(root: FolderItem, path: string): FolderItem | null
  searchItems(root: FolderItem, query: string): FolderItem[]
}
```

■ Phase 2: FolderExplorerUI
```typescript
class FolderExplorerUI {
  // UI構築
  createModal(): HTMLElement
  renderFolderTree(root: FolderItem): HTMLElement
  renderFileItem(item: FolderItem): HTMLElement
  
  // イベントハンドリング  
  handleFolderClick(folderId: string): void
  handleFileClick(fileUrl: string): void
  handlePreviewClick(fileUrl: string): void
  
  // 状態管理
  toggleFolder(folderId: string): void
  selectItem(itemId: string): void
  updateBreadcrumb(path: string[]): void
}
```

■ Phase 3: 高度機能
- PDF表示用iframe/embed
- 検索結果ハイライト
- キーボードナビゲーション
- 右クリックコンテキストメニュー

================================================================================
【5. 注意事項】
================================================================================

■ 互換性
- 既存のMaterial、Assignment、Quiz機能とは独立
- TACTポータルの既存UIを破壊しない
- 他の拡張機能との競合回避

■ セキュリティ
- API通信の適切な認証
- XSS対策
- データの安全な保存

■ メンテナンス性
- コードの可読性
- 適切なエラーログ
- 機能の独立性維持

